apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: default
data:
  nginx.conf: |
    events{}
    
    http {
        upstream backend-users {
            server users-service:3000;  # Nome del servizio Kubernetes per il backend degli utenti
        }

        upstream backend-stories {
            server tts-service:5000;  # Nome del servizio Kubernetes per il backend delle storie (se TTS è quello che intendi)
        }

        upstream frontend-expo {
            server frontend-expo-service:8081;  # Nome del servizio Kubernetes per il frontend Expo
        }

        server {
            listen 80;

            # Proxy to frontend
            location / {
                proxy_pass http://frontend-expo;  # Riferimento al servizio Kubernetes del frontend Expo
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                # WebSocket support for Expo
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
            }

            # Proxy to users service
            location /users/ {
                proxy_pass http://backend-users;  # Riferimento al servizio Kubernetes per gli utenti
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                # Set CORS headers
                add_header Access-Control-Allow-Origin $http_origin always;
                add_header Access-Control-Allow-Credentials true;
                add_header Access-Control-Allow-Methods "GET, POST, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization";

                # Handle OPTIONS method
                if ($request_method = OPTIONS) {
                    add_header Content-Length 0;
                    add_header Content-Type text/plain;
                    return 204;
                }
            }

            location /users/healthz {
                proxy_pass http://users-service/users/healthz;  # Endpoint di salute per il servizio users
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                # Set CORS headers
                add_header Access-Control-Allow-Origin $http_origin always;
                add_header Access-Control-Allow-Credentials true;
                add_header Access-Control-Allow-Methods "GET";
                add_header Access-Control-Allow-Headers "Content-Type";
            }

            # Proxy to stories service
            location /stories/ {
                proxy_pass http://backend-stories;  # Riferimento al servizio Kubernetes per le storie (assumendo che TTS sia il servizio giusto)
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                # Set CORS headers
                add_header Access-Control-Allow-Origin $http_origin always;
                add_header Access-Control-Allow-Credentials true;
                add_header Access-Control-Allow-Methods "GET, POST, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization";

                # Handle OPTIONS method
                if ($request_method = OPTIONS) {
                    add_header Content-Length 0;
                    add_header Content-Type text/plain;
                    return 204;
                }
            }

            location /stories/healthz {
                proxy_pass http://tts-service/stories/healthz;  # Endpoint di salute per il servizio TTS (se è quello giusto per le storie)
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                # Set CORS headers
                add_header Access-Control-Allow-Origin $http_origin always;
                add_header Access-Control-Allow-Credentials true;
                add_header Access-Control-Allow-Methods "GET";
                add_header Access-Control-Allow-Headers "Content-Type";
            }

            # Default 404 for unmatched routes
            error_page 404 /404.html;
            location = /404.html {
                internal;
                return 404;
            }
        }
    }
