services:

  # reverse-proxy server
  proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: proxy-service
    ports:
      - "8000:8000"
    networks:
      - proxy
    depends_on:
      - backend-users
      - backend-stories
      - backend-tts
      - frontend-expo
    volumes:
      - proxy_vol:/var/log/nginx/

   # Database (MySQL) micro
  db:
    container_name: mysql-service
    build:
      context: ./backend/db
      dockerfile: Dockerfile
    env_file:
      - ./backend/db/.env
    restart: always
    volumes:
      - db-data:/var/lib/mysql  # Persist database data
    networks:
      - server-db
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
  
  # migration service for db
  backend-migration:
    container_name: migration-service
    build:
      context: ./backend/migration
      dockerfile: Dockerfile
    env_file:
      - ./backend/migration/.env
    networks:
      - server-db
    #volumes:
    #  - ./backend/migration/backup_data:/backup
    depends_on:
        - db
    
  # Backend users micro
  backend-users:
    container_name: users-service
    env_file:
      - ./backend/users/.env
    build:
      context: ./backend/users
      dockerfile: Dockerfile
    command: npm run start-watch
    volumes:
      - ./backend/users/src:/code/src:rw
      - back-notused:/opt/app/node_modules
    networks:
      - server-db
      - proxy
    depends_on:
      - db

  # Backend story service micro
  backend-stories:
    container_name: story-service
    env_file:
      - ./backend/stories/.env
    build:
      context: ./backend/stories
      dockerfile: Dockerfile
    volumes:
      - ./backend/stories:/app:rw
    networks:
       - server-db
       - proxy
    depends_on:
      - db
  
  # Text-to-Speach micro
  backend-tts:
    container_name: tts-service
    build:
      context: ./backend/tts
      dockerfile: Dockerfile
    networks:
      - proxy
      - frontend-tts
    depends_on:
      - frontend-expo
    volumes:
      - tts_server_vol:/app

  # IA micro
  backend-ia:
   container_name: ia-service
   build:
     context: ./backend/ia
     dockerfile: Dockerfile
   networks:
     - proxy
     - frontend-ia
   depends_on:
     - frontend-expo

  # Frontend expo micro
  frontend-expo:
    container_name: expo-service
    env_file:
      - ./frontend/.env
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 8081:8081
    networks:
      - frontend-tts
      - frontend-ia
      - proxy
    volumes:
      - ./frontend/sergio/app:/opt/my-app/app

# Networks configuration
networks:
  server-db:
    driver: bridge
  frontend-tts:
    driver: bridge
  frontend-ia:
    driver: bridge
  proxy:
    driver: bridge

# Volumes
volumes:
  back-notused:
  db-data:
  # backup_data:

  proxy_vol:
    name: proxy_vol
    driver: local
    driver_opts:
      device: ./proxy/log
      o: bind
      type: none

  tts_server_vol:
    name: tts_server_vol
    driver: local
    driver_opts:
      device: ./backend/tts
      o: bind
      type: none