services:
   # Database (MySQL) micro
  db:
    container_name: db-service
    env_file:
      - ./backend/db/.env
    build:
      context: ./backend/db
      dockerfile: Dockerfile
    restart: always
    volumes:
      - db-data:/var/lib/mysql  # Persist database data
    networks:
      - server-db
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    
  # Backend users micro
  backend-users:
    container_name: users-service
    env_file:
      - ./backend/users/.env
    build:
      context: ./backend/users
      dockerfile: Dockerfile
    command: npm run start-watch
    ports:
      - "3000:3000"
      - "9229:9229"
      - "9230:9230"
    volumes:
      - ./backend/users/src:/code/src:rw
      - ./backend/users/package.json:/code/package.json
      - ./backend/users/package-lock.json:/code/package-lock.json
      - back-notused:/opt/app/node_modules
    networks:
      - server-db
      - reverse-proxy
    depends_on:
      db:
        condition: service_healthy

  # Backend story service (Spring Boot) micro
  backend-stories:
    container_name: story-service
    build:
      context: ./backend/stories
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./backend/stories:/code/src:rw
    networks:
      - server-db
      - reverse-proxy
    depends_on:
      db:
        condition: service_healthy


  # Frontend expo micro
  frontend-expo:
    container_name: expo-service
    env_file:
      - ./frontend/sergio/.env
    build:
      context: ./frontend/sergio
      dockerfile: Dockerfile
    networks:
      - reverse-proxy
    #network_mode: "host"
    ports:
      - "8081:8081"
      - "19000:19000"
      - "19001:19001"
      - "19002:19002"
    depends_on:
      backend-users:
        condition: service_healthy
    #volumes:
      #- ./frontend/sergio/:/opt/my-app/
      #- /code/node_modules

  # reverse-proxy server
  nginx:
    image: nginx:latest
    container_name: nginx-service
    volumes:
      - ./proxy/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"  # Map host port 80 to the container port 80
    networks:
      - reverse-proxy
    depends_on:
      - backend-users  # Ensure Nginx starts after backend

# Networks configuration
networks:
  server-db:
    driver: bridge
  reverse-proxy:
    driver: bridge

# Volumes
volumes:
  back-notused:
  db-data:
