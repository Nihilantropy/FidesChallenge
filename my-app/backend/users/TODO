# ðŸ“‹ Users Service TODO List

## **Mandatory Routes**

1. **POST `/users/create`** - **Create a New User**
   - **Description**: This route allows new users to register by submitting their details (username, email, password).
   - **Request Body**: JSON object containing fields like `username`, `email`, and `password`.
   - **Response**: Returns the newly created user details, excluding the password.

2. **POST `/users/login`** - **User Login**
   - **Description**: Authenticates a user by validating their email and password, returning a token if successful.
   - **Request Body**: JSON object with `email` and `password`.
   - **Response**: Returns a JWT or Paseto token for authenticated requests.

3. **GET `/users/profile`** - **Get User Profile**
   - **Description**: Retrieves the profile information of the authenticated user.
   - **Response**: User profile details (username, email, registration date).

4. **DELETE `/users/delete`** - **Delete User Account**
   - **Description**: Enables a user to delete their account, removing all associated data.
   - **Response**: Status confirming deletion or an error if the user does not exist.

## **Plus Routes** (Optional, if time allows)

1. **POST `/users/reset-password`** - **Reset User Password**
   - **Description**: Allows users to initiate a password reset process, typically sending a reset link to their email.
   - **Request Body**: JSON object with the `email`.
   - **Response**: Confirmation message indicating a reset link has been sent.

2. **GET `/users`** - **Get All Users**
   - **Description**: Fetches a list of all registered users (admin route).
   - **Response**: List of user objects with basic details (username, email).

3. **GET `/users/search`** - **Search Users**
   - **Description**: Allows searching for users based on a query (e.g., username or email).
   - **Query Parameters**: Optional `q` for search term, with support for pagination.
   - **Response**: List of users matching the search criteria.

4. **POST `/users/{userId}/role`** - **Assign Role to User**
   - **Description**: Allows admins to assign a role (e.g., admin, moderator) to a specific user.
   - **Path Variable**: `userId`.
   - **Request Body**: JSON object with `role`.
   - **Response**: Updated user role details.

5. **DELETE `/users/{userId}/role`** - **Remove Role from User**
   - **Description**: Allows admins to remove a role from a specific user.
   - **Path Variable**: `userId`.
   - **Response**: Status confirming the role removal.

6. **GET `/users/{userId}/activity`** - **Get User Activity Log**
   - **Description**: Retrieves the activity log of a specific user (e.g., login times, actions performed).
   - **Path Variable**: `userId`.
   - **Response**: List of user activities with timestamps and descriptions.

7. **POST `/users/logout`** - **User Logout**
   - **Description**: Logs out the user by invalidating their token (if applicable).
   - **Response**: Confirmation of logout status.

---

This TODO list outlines the current implementation of the Users Service with **mandatory routes** focused on essential user management functionalities, while the **plus routes** offer potential enhancements for user experience and admin capabilities if time permits. This organized approach will help ensure a systematic implementation process.
