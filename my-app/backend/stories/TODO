# ðŸ“‹ Stories Service TODO List

## **Mandatory Routes**

1. **POST `/stories`** - **Create a New Story**
   - **Description**: This route allows users to create a new story by submitting the story content, title, and other relevant metadata.
   - **Request Body**: JSON object containing fields like `title`, `content`, and optional tags.
   - **Response**: Returns the newly created story's details, including its unique ID.

2. **GET `/stories`** - **Get All Stories**
   - **Description**: Fetches a list of all available stories. This endpoint can be expanded with filters (e.g., by author, date, tag).
   - **Query Parameters**: Optional parameters for pagination (`page`, `limit`), filtering by `authorId`, or sorting.
   - **Response**: List of story objects with summary information (title, author, date created).

3. **GET `/stories/{storyId}`** - **Get Story by ID**
   - **Description**: Retrieves a specific story by its unique ID.
   - **Path Variable**: `storyId` (the ID of the story to retrieve).
   - **Response**: Full details of the requested story (title, content, author info, date, etc.).

4. **PUT `/stories/{storyId}`** - **Update an Existing Story**
   - **Description**: Allows the author of a story to update the title, content, or metadata of an existing story.
   - **Path Variable**: `storyId` (the ID of the story to update).
   - **Request Body**: JSON object with fields for updating, such as `title` and `content`.
   - **Response**: Updated story details after successful modification.

5. **DELETE `/stories/{storyId}`** - **Delete a Story**
   - **Description**: Enables a user to delete their story.
   - **Path Variable**: `storyId` (the ID of the story to delete).
   - **Response**: Status confirming deletion, or an error if the story does not exist.

## **Plus Routes** (Optional, if time allows)

1. **POST `/stories/{storyId}/comments`** - **Add Comment to a Story**
   - **Description**: Allows users to add a comment on a specific story.
   - **Path Variable**: `storyId` (the ID of the story to comment on).
   - **Request Body**: JSON object containing `userId` and `commentText`.
   - **Response**: Newly added comment with its unique ID and timestamp.

2. **GET `/stories/{storyId}/comments`** - **Get Comments for a Story**
   - **Description**: Retrieves all comments associated with a specific story.
   - **Path Variable**: `storyId`.
   - **Response**: List of comments with details (commenter, timestamp, text).

3. **PUT `/stories/{storyId}/comments/{commentId}`** - **Update a Comment on a Story**
   - **Description**: Allows the author of a comment to update the content of their comment.
   - **Path Variables**: `storyId` and `commentId`.
   - **Request Body**: JSON with the updated `commentText`.
   - **Response**: Updated comment details.

4. **DELETE `/stories/{storyId}/comments/{commentId}`** - **Delete a Comment on a Story**
   - **Description**: Enables a user to delete their comment on a story.
   - **Path Variables**: `storyId` and `commentId`.
   - **Response**: Status confirming the deletion of the comment.

5. **POST `/stories/{storyId}/likes`** - **Like a Story**
   - **Description**: Allows a user to like a specific story.
   - **Path Variable**: `storyId`.
   - **Request Body**: JSON with `userId`.
   - **Response**: Status or count of likes for the story.

6. **DELETE `/stories/{storyId}/likes`** - **Unlike a Story**
   - **Description**: Allows a user to remove their like from a specific story.
   - **Path Variable**: `storyId`.
   - **Request Body**: JSON with `userId`.
   - **Response**: Status or updated like count.

7. **GET `/stories/{storyId}/likes`** - **Get Likes for a Story**
   - **Description**: Fetches the list of users who liked a specific story or the total like count.
   - **Path Variable**: `storyId`.
   - **Response**: List of users who liked the story or like count.

8. **GET `/stories/popular`** - **Get Most Popular Stories**
   - **Description**: Returns a list of the most popular stories based on like count or other criteria.
   - **Response**: List of popular stories sorted by popularity (e.g., number of likes).

9. **GET `/stories/recent`** - **Get Recently Added Stories**
   - **Description**: Fetches a list of the most recently added stories.
   - **Response**: List of recent stories with summary details.

---

This TODO list will guide the development of the Stories Service. The **mandatory routes** are the primary focus to ensure basic functionality, while the **plus routes** can be added to enhance the user experience if time and resources allow. This structure also helps ensure a clear and organized implementation plan.
